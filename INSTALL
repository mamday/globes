GLoBES - General Long Baseline Experiment Simulator
===================================================

Prerequisites for installation of GLoBES
========================================

Besides the usual things like a working libc you need to have
 
	gcc	The GNU compiler collection
 			gcc.gnu.org
	GSL 	The GNU Scientific Library
			www.gnu.org/software/gsl/

The library `libglobes' should in principle compile with any C/C++
compiler but the `globes' binary uses the `argp' facility of `glibc'
to parse its command line options. However, on platforms where `argp'
is lacking GLoBES has replacement code, thus it should also work
there. GLoBES is, however, using the C99 standard in order to handle
complex numbers, but that is the only feature of C99 used.

GSL is also available as rpm's from the various distributors of
GNU/Linux, see their web sites for downloads. Chances are that gcc and
GSL are already part of your installation.  For building GLoBES from
source, however, not only working libaries for above packages are
needed but also the headers, especially for GSL. Depending on your
installation, eg. on RedHat/Fedora, of GSL this may require to
additionally install a rpm-package named `gsl-devel'. If GSL has been
installed from the tar-ball as provided by gnu.org no problems should
occur. Furthmore you need a working `make' to build and install
GLoBES.


Installation Instructions
=========================

GLoBES follows the standard GNU installation procedure.  To compile
GLoBES you will need an ANSI C-compiler.  After unpacking the
distribution the Makefiles can be prepared using the configure
command,

  ./configure

You can then build the library by typing,

  make

A shared  version of the library will be compiled by
default. 
 
The libraries and modules can be installed using the command,

  make install

The install target also will install a program with name globes to
/usr/local/bin.

The default install directory prefix is /usr/local.  Consult the
"Further Information" section below for instructions on installing the
library in another location or changing other default compilation
options.

Moreover a config-script called `globes-config' will be
installed. This script displays all information necessary to link any
program with GLoBES.  For building static libaries and linking against
them see the corresponding section of this file.
 
                    ------------------------------


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It
uses those values to create a `Makefile' in each directory of the
package.  It may also create one or more `.h' files containing
system-dependent definitions.  Finally, it creates a shell script
`config.status' that you can run in the future to recreate the
current configuration, a file `config.cache' that saves the results
of its tests to speed up reconfiguring, and a file `config.log'
containing compiler output (useful mainly for debugging
`configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files and
     documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  5. Since you've installed a library don't forget to run 'ldconfig'!

Installation without root privilege
===================================

Install GLoBES to a directory of your choice GLB_DIR. This is done by
	configure --prefix=GLB_DIR 
and then follow the usual
installation guide. The only remaining problem is that you
have to tell the compiler where to find the header files, and
the linker where to find the library. Furthermore you have to
make sure that the shared object files are found during
execution. Running 'configure' also produces a 'Makefile' in
the examples subdirectory which can serve as a template for
the compilation and linking process, since all necessary flags
are correctly filled in. Another solution is to set the
environment variable LD_RUN_PATH during linking to
GLB_DIR/lib/. Best thing is to add this to your shell dot-file
(e.g. .bashrc). Then you can use: A typical compiler command
like
	gcc -c my_program.c -IGLB_DIR/include/

and a typical linker command like
	gcc my_program.o -lglobes -LGLB_DIR/lib/ -o my_executable

More information on this issue can be obtained by having a look into
the output of make install.

CAVEAT: It is in principle possible to have many installations on one
machine, especially the situation of having an installation by root
and by a user at the same time might occur. However it is strictly
warned against this possibility since it is *extremely* likely to
create some versioning problem at some time!

Building and Using static versions of GLoBES
============================================

In certain circumstances it may be useful to use a static version of
libglobes or any of the binaries, e.g. when running on a cluster.

The `configure' script accepts the option `--disable-shared', in
which case only static objects are built, i.e. only a static
version of libglobes. In case your system does not support shared
libraries the `configure' script recognizes this. If you give no
options to `configure', both shared and static versions are built
and will be installed. All binaries, however, will use dynamic
linking. If you want to build static binaries, use
LDFLAGS='-all-static' for building them.

Sometimes it is convenient, eg. for debugging purposes, to have a
statically linked version of a program using GLoBES, which is easiest
achieved by just linking with `libglobes.a'. If you need a completely
statically linked version, please, have a look at the Makefile in the
`examples' directory.
	make example-static 
produces a statically linked program that should in principle run on
most Linuxes.  It should be straightforward to adapt this example to
your needs.

All these options rely on a working gcc installation. It seems that
gcc 3.x is broken in subtle way which makes it necessary to add a
symbolic link in the gcc library directory. The diagnostic for this
requirement is that building static programs fails with the error
message `cannot find -lgcc_s'. In those cases, find `libgcc.a' and add
a symbolic link in the same directory where you found it (this
requires probably root privileges)
	ln -s libgcc.a libgcc_s.a

If you can not write to this directory just use the following work
around. Add the same link as above to the directory where you
installed GLoBES into
	cd prefix/lib       
	ln -s path_to_libgcc.a/libgcc.a libgcc_s.a
and then change back into the 'examples' directory and type
	make LDFLAGS=-Lprefix/lib example-static
and you are done.

GSL requirements
================

Sometimes the GNU scientific library is not available or is installed
in a non-standard location. This situation can arise in an
installation without root privileges. In this case one can specify
'--with-gsl-prefix=path_to_gsl' as option to the `configure' script.
If one wants to use a shared version of `libgsl' then one has to make
sure that the linker find the library at run-time. This can be
achieved by setting the environment variable LD_LIBRARY_PATH
correctly, i.e. (in bash)
	export LD_LIBRARY_PATH='path_to_gsl'
You also can use a static version of GSL by either building GLoBES
with LDFLAG='-all-static' or by configuring GSL with
'--disable-shared'. In both cases no further actions like setting any
environment variables is necessary.

Distributions
=============

RedHat (all versions)
---------------------

The standard rpm-based installation of GSL does not provide any header
files for GSL, which are however needed to compile GLoBES. You have to
install an additional rpm-package called 'gsl-devel'. Altnernatively
you can install GSL from a tar-ball and use the `--with-gsl-prefix'
option to the configure script of GLoBES.

Platforms
=========

GLoBES builds and installs on 64bit Linux systems.
GLoBES should work on Mac OS.

Windows
-------

Currently GLoBES is only able to work under Cygwin www.cygwin.com.
Inside Cygwin GLoBES needs to be built with these commands:
	configure
	make LDFLAGS='-no-undefined'

Mac OS
------

In order to compile and link globes use
	configure --disable-rpath

And then everything should work as usual, however, if you install
GLoBES in a non-standard location you have to set the approriate
environment variable to ensure that the linker finds the library at
run-time. Typically this variable is named DYLD_LIBRARY_PATH.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.


Building a perl extension
-------------------------

This feature is experimental and your mileage my vary!

This feature allows to build a perl binding of GLoBES, i.e. you will
in the end have a perl module from which you can use GLoBES from wthin
any perl program.

If(!) everything works as intended, all you have to do is to provide
'--enable-perl' to 'configure' and type 'make install'. Now have a
look at 'globes/example.pl' and you should see how that works in
principle. 

The trick here, is that we use SWIG (http://www.swig.org/) to generate
a wrapper file for GLoBES. The wrapper file is part of the GLoBES
tar-ball (globes/globes_perl.c) and hence you should not need SWIG to
be installed on your system.

All the tricks employed to get perl extension working should in some
form to be applicable to building other extensions, like python. If
you want to try that you will need SWIG.

Building RPMs
-------------

This feature is experimental and your mileage my vary!

Many people find binary RPMs useful, therefore we provide an optional
feature '--enable-rpm-rules' which should produce all the necessary
makefile rules for RPM building. To actually build RPMs requires that
your system is properly setup for that. How you can do that you can
learn at http://www.rpm.org. You then can use 'make rpm', most likely
you will need to be root to do that (sudo won't work!).

NOTE to people packagin GLoBES RPMs: Please, use the provided spec
file and do include the headers!

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
